{"version":3,"sources":["actions/actionTypes.js","reducers/map.js","services/geoJson.js","components/map.js","actions/map.js","components/recordCard.js","components/recordsList.js","pages/home-page/index.jsx","App.js","serviceWorker.js","services/api.js","sagas/map.js","sagas/index.js","index.js"],"names":["FETCH_MAP_DATA","FETCH_MAP_DATA_SUCCESS","FETCH_MAP_DATA_ERROR","initialState","currentData","calculatedData","dataFetching","dataFetchingError","map","state","arguments","length","undefined","action","type","types","Object","objectSpread","toConsumableArray","payload","_","require","getGeoJsonTemplate","color","shape","features","geometry","coordinates","rgbToHex","r","g","b","red","toString","green","blue","convertRawDataToGeoJson","rawData","keys","data","cloneDeep","reduce","acum","currentKey","_data$currentKey","x","y","z","calcRes","Math","sqrt","pow","finalObject","defineProperty","startAlgoritm","_getMaxMinValues","firstObjectValue","accum","objectKey","maxValue","minValue","getMaxMinValues","finalResult","filteredDataWithColors","geoJson","point","nextPointCoords","pointColor","nextKeyNumber","keyNumber","long","parseFloat","coords","lat","pointCoords","nextPoint","pointsWithSameColorsIndex","findIndex","elem","index","push","concat","newGeoJson","newData","getGeoJsonResult","rawDataWithColors","kfLong","KalmanFilter","kfLat","filteredLong","filter","filteredLat","filterDataWithKalman","key","weight","ceil","split","setColors","MapViewScreen","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","viewport","width","height","zoom","showData","bind","assertThisInitialized","getRecords","locateUser","_this2","navigator","geolocation","getCurrentPosition","position","setState","latitude","longitude","MAP_STYLE","_coords$reduce","accumulator","currentObj","id","sources","layers","source","paint","line-color","line-width","newSources","newLayers","_this3","react_default","a","createElement","esm","assign","mapStyle","onViewportChange","Component","connect","_ref","dispatch","actionTypes","mapActions","itemStyle","marginTop","cursor","backgroundColor","recordCard","created","calculateData","List","Item","style","onClick","Content","as","RecordsList","_this$props","Container","divided","relaxed","top","right","overflow","record","_id","selectedId","getState","_getState$map","selectedRawData","find","rawRecord","geoJsonData","JSON","parse","isEqual","HomePage","className","components_map","recordsList","App","home_page","Boolean","window","location","hostname","match","API_URL","process","api","Api","sendRequest","url","adapter","request","method","toUpperCase","catch","handleApiError","axios","create","baseURL","err","response","Promise","reject","Error","message","mapSaga","_marked","regenerator_default","wrap","_context2","prev","next","_context","sent","put","t0","console","log","stop","mark","all","takeLatest","_marked2","rootSaga","fork","sagas_marked","reducer","combineReducers","reducers","sagaMiddleware","createSagaMiddleware","rootElement","document","getElementById","middleware","reduxThunk","store","createStore","composeWithDevTools","applyMiddleware","apply","run","ReactDOM","render","es","src_App","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a606e75.chunk.js","sourcesContent":["export const FETCH_MAP_DATA = 'FETCH_MAP_DATA';\r\nexport const FETCH_MAP_DATA_SUCCESS = 'FETCH_MAP_DATA_SUCCESS';\r\nexport const FETCH_MAP_DATA_ERROR = 'FETCH_MAP_DATA_ERROR';\r\n\r\nexport const CALCULATE_DATA = 'CALCULATE_DATA';\r\nexport const CALCULATE_DATA_SUCCESS = 'CALCULATE_DATA_SUCCESS';\r\nexport const CALCULATE_DATA_ERROR = 'CALCULATE_DATA_ERROR';\r\nexport const CALCULATE_DATA_IS_EQUAL = 'CALCULATE_DATA_IS_EQUAL';","import * as types from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    currentData: null,\r\n    calculatedData: null,\r\n    dataFetching: false,\r\n    dataFetchingError: {}\r\n};\r\n\r\nconst map = (state = initialState, action = {}) => {\r\n    switch (action.type) {\r\n        case types.FETCH_MAP_DATA: {\r\n            return {\r\n                ...state,\r\n                dataFetching: true\r\n            }\r\n        }\r\n        case types.FETCH_MAP_DATA_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                dataFetching: false,\r\n                currentData: [...action.payload]\r\n            }\r\n        }\r\n        case types.FETCH_MAP_DATA_ERROR: {\r\n            return {\r\n                ...state,\r\n                dataFetching: false,\r\n                currentData: {},\r\n                dataFetchingError: action.payload\r\n            }\r\n        }\r\n        case types.CALCULATE_DATA_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                calculatedData: action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default map;","/* eslint-disable prefer-template */\r\nimport KalmanFilter from 'kalmanjs';\r\n\r\nconst _ = require('lodash');\r\n\r\nexport const LINE_SHAPE = 'LineString';\r\nexport const POINT_SHAPE = 'MultiPoint';\r\n\r\nconst getGeoJsonTemplate = (color, shape) => {\r\n    return ({\r\n        type: \"FeatureCollection\",\r\n        color,\r\n        features: [\r\n            {\r\n                type: \"Feature\",\r\n                geometry: {\r\n                    type: shape,\r\n                    coordinates: []\r\n                }\r\n            }\r\n        ]\r\n    })\r\n}\r\n\r\nconst filterDataWithKalman = (rawDataWithColors) => {\r\n    const kfLong = new KalmanFilter();\r\n    const kfLat = new KalmanFilter();\r\n    const result = rawDataWithColors.map((point) => {\r\n        const pointCoords = point.coords;\r\n        const filteredLong = kfLong.filter(parseFloat(pointCoords[0]));\r\n        const filteredLat = kfLat.filter(parseFloat(pointCoords[1]));\r\n\r\n        return {\r\n            ...point,\r\n            coords: [filteredLong, filteredLat]\r\n        };\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\nconst getGeoJsonResult = (filteredDataWithColors, shape) => {\r\n    return filteredDataWithColors.reduce((geoJson, point) => {\r\n        const pointColor = point.color;\r\n        const nextKeyNumber = geoJson.keyNumber + 1;\r\n        const long = parseFloat(point.coords[0]);\r\n        const lat = parseFloat(point.coords[1]);\r\n        const pointCoords = [long, lat];\r\n        const nextPoint = filteredDataWithColors[nextKeyNumber];\r\n        let nextPointCoords;\r\n\r\n        if (!nextPoint) {\r\n            nextPointCoords = [long, lat];\r\n        } else {\r\n            nextPointCoords = [parseFloat(nextPoint.coords[0]), parseFloat(nextPoint.coords[1])];\r\n        }\r\n\r\n        if (shape === POINT_SHAPE) {\r\n            const pointsWithSameColorsIndex = geoJson.data.findIndex((elem, index) => elem.color === pointColor && index !== geoJson.keyNumber)\r\n\r\n            if (pointsWithSameColorsIndex !== -1) {\r\n                geoJson.data[pointsWithSameColorsIndex].features[0].geometry.coordinates.push([...pointCoords]);\r\n\r\n                return { data: geoJson.data };\r\n            }\r\n\r\n            const newGeoJson = getGeoJsonTemplate(pointColor, shape);\r\n            newGeoJson.features[0].geometry.coordinates.push([...pointCoords]);\r\n            geoJson.data.push(newGeoJson);\r\n\r\n            return { data: geoJson.data, keyNumber: geoJson.keyNumber + 1 };\r\n        }\r\n\r\n        const newGeoJson = getGeoJsonTemplate(pointColor, shape);\r\n\r\n        newGeoJson.features[0].geometry.coordinates.push(pointCoords, nextPointCoords);\r\n\r\n        const newData = geoJson.data;\r\n\r\n        newData.push(newGeoJson);\r\n\r\n        return { data: newData, keyNumber: nextKeyNumber };\r\n\r\n    }, { keyNumber: 0, data: [] })\r\n}\r\n\r\nconst getMaxMinValues = (data) => {\r\n    const firstObjectValue = data[Object.keys(data)[0]];\r\n\r\n    return Object.keys(data).reduce((accum, objectKey) => {\r\n        const maxValue = data[objectKey] > accum.maxValue ? data[objectKey] : accum.maxValue;\r\n        const minValue = data[objectKey] < accum.minValue ? data[objectKey] : accum.minValue;\r\n\r\n        return { maxValue, minValue };\r\n    }, { maxValue: 0, minValue: firstObjectValue })\r\n}\r\n\r\nconst rgbToHex = (r, g, b) => {\r\n    let red = r.toString(16);\r\n    let green = g.toString(16);\r\n    let blue = b.toString(16);\r\n\r\n    if (red.length === 1)\r\n        red = \"0\" + red;\r\n    if (green.length === 1)\r\n        green = \"0\" + green;\r\n    if (blue.length === 1)\r\n        blue = \"0\" + blue;\r\n\r\n    return \"#\" + red + green + blue;\r\n}\r\n\r\nconst setColors = (maxValue, minValue, rawData) => {\r\n    return Object.keys(rawData).map((key) => {\r\n        const point = rawData[key];\r\n        let weight = ((point - minValue) / (maxValue - minValue));\r\n\r\n        if (minValue === maxValue) {\r\n            weight = 0.5;\r\n        }\r\n\r\n        const red = Math.ceil(255 * weight);\r\n        const green = Math.ceil(255 - red);\r\n\r\n        return {\r\n            coords: key.split(','),\r\n            color: rgbToHex(red, green, 0),\r\n            weight\r\n        };\r\n    })\r\n}\r\n\r\nconst startAlgoritm = (rawData) => {\r\n    const data = _.cloneDeep(rawData);\r\n    return Object.keys(data).reduce((acum, currentKey) => {\r\n        const { x, y, z } = data[currentKey];\r\n        const calcRes = Math.sqrt(x ** 2 + y ** 2 + z ** 2);\r\n        const finalObject = {\r\n            [currentKey]: calcRes\r\n        }\r\n\r\n        return {\r\n            ...acum,\r\n            ...finalObject\r\n        }\r\n    }, {});\r\n}\r\n\r\nconst convertRawDataToGeoJson = (rawData, shape = LINE_SHAPE) => {\r\n    if (rawData && Object.keys(rawData).length) {\r\n        const data = startAlgoritm(rawData);\r\n        const { maxValue, minValue } = getMaxMinValues(data);\r\n        const rawDataWithColors = setColors(maxValue, minValue, data);\r\n        const filteredDataWithColors = filterDataWithKalman(rawDataWithColors);\r\n        const finalResult = getGeoJsonResult(filteredDataWithColors, shape);\r\n\r\n        return ({ coords: [...finalResult.data], shape });\r\n    } else {\r\n        return ({ coords: [], shape });\r\n    }\r\n}\r\n\r\nexport default convertRawDataToGeoJson;","import React, { Component } from \"react\";\r\nimport ReactMapGL from \"react-map-gl\";\r\nimport * as mapActions from \"../actions/map\";\r\nimport { connect } from \"react-redux\";\r\nimport MAP_STYLE from './map-style-basic-v8.json';\r\n// import MAP_STYLE from 'mapbox://styles/mapbox/streets-v11';\r\n\r\nclass MapViewScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            viewport: {\r\n                width: 1250,\r\n                height: 900,\r\n                zoom: 8\r\n            }\r\n        };\r\n\r\n        this.showData = this.showData.bind(this);\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { getRecords } = this.props;\r\n\r\n        getRecords();\r\n        this.locateUser();\r\n    }\r\n\r\n    locateUser() {\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n            this.setState({\r\n                ...this.state,\r\n                viewport: {\r\n                    ...this.state.viewport,\r\n                    latitude: position.coords.latitude,\r\n                    longitude: position.coords.longitude,\r\n                    zoom: 10\r\n                }\r\n            }\r\n            );\r\n        });\r\n    }\r\n\r\n    showData() {\r\n        const { calculatedData } = this.props;\r\n        if (!calculatedData) {\r\n            return { ...MAP_STYLE };\r\n        }\r\n\r\n        const coords = calculatedData.coords;\r\n\r\n        const { sources: newSources, layers: newLayers } = coords.reduce((accumulator, currentObj) => {\r\n            const { id, sources, layers } = accumulator;\r\n            const { color } = currentObj;\r\n            const newSources = [\r\n                ...sources,\r\n                {\r\n                    type: 'geojson',\r\n                    data: { ...currentObj }\r\n                }\r\n            ];\r\n            const newLayers = [\r\n                ...layers,\r\n                {\r\n                    id: '' + id,\r\n                    type: 'line',\r\n                    source: '' + id,\r\n                    paint: {\r\n                        'line-color': color,\r\n                        // 'line-cap': 'round',\r\n                        // 'line-join': 'round',\r\n                        'line-width': 10\r\n                    }\r\n                }\r\n\r\n            ];\r\n            const newId = id + 1;\r\n\r\n            return {\r\n                sources: newSources,\r\n                layers: newLayers,\r\n                id: newId\r\n            }\r\n        }, {\r\n            sources: [],\r\n            layers: [],\r\n            id: 0\r\n        });\r\n\r\n        const { layers, sources } = MAP_STYLE;\r\n\r\n        return ({\r\n            ...MAP_STYLE,\r\n            layers: [\r\n                ...layers,\r\n                ...newLayers\r\n            ],\r\n            sources: {\r\n                ...sources,\r\n                ...newSources\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { viewport } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <ReactMapGL\r\n                    width=\"100%\"\r\n                    height=\"100%\"\r\n                    {...viewport}\r\n                    mapStyle={this.showData()}\r\n                    onViewportChange={(viewport) => this.setState({ viewport })}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ map }) => ({\r\n    ...map\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getRecords: (id) => dispatch(mapActions.getRecords(id))\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MapViewScreen);\r\n","import * as actionTypes from './actionTypes';\r\nimport convertRawDataToGeoJson from '../services/geoJson';\r\nimport _ from 'lodash';\r\n\r\nexport const getRecords = (id) => {\r\n    return {\r\n        type: actionTypes.FETCH_MAP_DATA,\r\n        payload: id\r\n    };\r\n}\r\n\r\nexport const calculateData = (selectedId) => {\r\n    return (dispatch, getState) => {\r\n        dispatch({ type: actionTypes.CALCULATE_DATA });\r\n\r\n        const { calculatedData, currentData } = getState().map;\r\n        const selectedRawData = currentData.find((rawRecord) => rawRecord._id === selectedId);\r\n        const geoJsonData = convertRawDataToGeoJson(JSON.parse(selectedRawData.data));\r\n\r\n        if (!_.isEqual(calculatedData, geoJsonData)) {\r\n            dispatch({ type: actionTypes.CALCULATE_DATA_SUCCESS, payload: { ...geoJsonData } });\r\n        } else {\r\n            dispatch({ type: actionTypes.CALCULATE_DATA_IS_EQUAL });\r\n        }\r\n    }\r\n}","import React from 'react'\r\nimport { List } from 'semantic-ui-react'\r\n\r\nconst itemStyle = {\r\n    marginTop: '2px',\r\n    cursor: 'pointer',\r\n    backgroundColor: '#def05b'\r\n};\r\n\r\nexport default (props) => {\r\n    const { created, calculateData } = props;\r\n\r\n    return (\r\n        <List.Item style={itemStyle} onClick={calculateData}>\r\n            <List.Content>\r\n                <List.Item as='a'>{created}</List.Item>\r\n            </List.Content>\r\n        </List.Item >\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport { Container, List, Divider } from 'semantic-ui-react'\r\nimport RecordCard from './recordCard';\r\nimport { connect } from \"react-redux\";\r\nimport * as mapActions from \"../actions/map\";\r\n\r\nclass RecordsList extends Component {\r\n    render() {\r\n        const { currentData, calculateData } = this.props;\r\n        const renderCards = () => (currentData.map((record) => <RecordCard key={record._id} {...record} calculateData={() => calculateData(record._id)} />));\r\n        const listStyle = { position: 'absolute', top: 20, right: 35, backgroundColor: 'white', width: '15%', height: '15%', overflow: 'auto' };\r\n\r\n        return (\r\n            <Container>\r\n                <List divided relaxed style={listStyle}>\r\n                    {currentData ? renderCards() : 'No records'}\r\n                </List>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = ({ map }) => ({\r\n    ...map\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        calculateData: (id) => dispatch(mapActions.calculateData(id))\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(RecordsList);","import React from 'react';\r\nimport Map from '../../components/map';\r\nimport RecordsList from '../../components/recordsList';\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <div className='App'>\r\n      <Map />\r\n      <RecordsList />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from 'react';\nimport HomePage from './pages/home-page';\nimport 'semantic-ui-css/semantic.min.css';\n\nfunction App() {\n    return (\n        <HomePage />\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from \"axios\";\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nclass Api {\r\n    constructor() {\r\n        this.adapter = axios.create({\r\n            baseURL: API_URL\r\n        });\r\n    }\r\n\r\n    sendRequest = (url, type, payload) => {\r\n        return this.adapter.request({\r\n            url: url,\r\n            method: type.toUpperCase(),\r\n            data: payload\r\n        }).catch(this.handleApiError);\r\n    }\r\n\r\n    handleApiError(err) {\r\n        if (err.response && err.response.data) {\r\n            return Promise.reject(new Error(err.response.data));\r\n        }\r\n\r\n        return Promise.reject(new Error(err.message));\r\n    }\r\n}\r\n\r\nexport default new Api();","import {\r\n    call,\r\n    put,\r\n    all,\r\n    takeLatest\r\n} from \"redux-saga/effects\";\r\nimport * as actionTypes from '../actions/actionTypes';\r\nimport api from \"../services/api\";\r\n\r\nexport default function* mapSaga() {\r\n    function* getRecords() {\r\n        try {\r\n            const response = yield call(\r\n                api.sendRequest,\r\n                `/record`,\r\n                \"get\"\r\n            );\r\n            const { data } = response;\r\n\r\n            yield put({\r\n                type: actionTypes.FETCH_MAP_DATA_SUCCESS,\r\n                payload: data\r\n            });\r\n        } catch (err) {\r\n            console.log(err);\r\n\r\n            yield put({\r\n                type: actionTypes.FETCH_MAP_DATA_ERROR,\r\n                payload: err\r\n            });\r\n        }\r\n    }\r\n\r\n    yield all([\r\n        takeLatest(actionTypes.FETCH_MAP_DATA, getRecords)\r\n    ]);\r\n}\r\n","import { all, fork } from \"redux-saga/effects\";\r\nimport mapSaga from \"./map\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([fork(mapSaga)]);\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\nimport * as reducers from '../src/reducers';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootSaga from './sagas';\nconst reducer = combineReducers(reducers);\nconst sagaMiddleware = createSagaMiddleware();\nconst rootElement = document.getElementById('root');\nconst middleware = [reduxThunk, sagaMiddleware];\nconst store = createStore(\n    reducer,\n    composeWithDevTools(\n        applyMiddleware(...middleware)\n    )\n);\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}